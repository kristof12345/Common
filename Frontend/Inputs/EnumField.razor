@namespace Common.Web
@inherits AppInput<TEnum>

@using Syncfusion.Blazor.Inputs
@using Common.Application
@using Syncfusion.Blazor.DropDowns
@using Microsoft.AspNetCore.Components.Forms

@typeparam TEnum

<p style=@($"width: {Width}")>
    <SfDropDownList Value=@EnumExtensions.GetAttributeValue(Value) ValueChanged=@HandleValueChange DataSource=@Values FloatLabelType=@FloatLabelType.Auto Placeholder=@Label CssClass="e-outline e-bigger" Enabled=@(!Disabled) TValue=string TItem=string />
    @if (ValidationExpression != null)
    {
        <ValidationMessage For=@ValidationExpression />
    }
</p>

@code
{
    [Parameter]
    public List<string> Except { get; set; } = new List<string>();

    [Parameter]
    public bool AllowEmpty { get; set; }

    private List<string> Values { get => AllowEmpty ? EnumExtensions.GetAttributeList<TEnum>().Except(Except).Prepend("").ToList() : EnumExtensions.GetAttributeList<TEnum>().Except(Except).ToList(); }

    private async Task HandleValueChange(string value)
    {
        if (value != null)
        {
            if (value.Empty())
            {
                await ValueChanged.InvokeAsync(default(TEnum));
                await OnInput.InvokeAsync();
            }
            else
            {
                var EnumValue = EnumExtensions.GetValueFromAttribute<TEnum>(value);
                if (Value.ToString() != EnumValue.ToString())
                {
                    await ValueChanged.InvokeAsync(EnumValue);
                    await OnInput.InvokeAsync();
                }
            }
        }
    }
}