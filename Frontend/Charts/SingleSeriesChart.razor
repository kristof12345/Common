@namespace Common.Web

@using Common.Application
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

<div class="series-chart" style=@($"height: {Height}")>
    @if (Data == null)
    {
        <LoadingIndicator />
    }

    @if (Data != null)
    {
        <div class="chart">
            <SfChart Theme=@Theme.Material Background=@Colors.Transparent Height="350">

                <ChartPrimaryXAxis ValueType=@ValueType IntervalType=@ChartIntervalType LabelFormat=@ChartIntervalType.ToFormat() LabelIntersectAction=@LabelIntersectAction.Hide EdgeLabelPlacement=@EdgeLabelPlacement.Shift>
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>

                <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" OpposedPosition="true" LabelIntersectAction=@LabelIntersectAction.Hide RangePadding=@ChartRangePadding.Additional Minimum=@Minimum Maximum=@Maximum>
                    <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                </ChartPrimaryYAxis>

                <ChartSeriesCollection>
                    <ChartSeries DataSource=@RangedData Fill=@Color XName="Date" YName="Value" Type=@Type Width=@LineWidth Opacity=@Opacity>
                        @if (Type == ChartSeriesType.Area)
                        {
                            <ChartSeriesBorder Width=@LineWidth Color=@Color></ChartSeriesBorder>
                        }
                    </ChartSeries>
                </ChartSeriesCollection>

            </SfChart>
        </div>

        @if (SelectorType == SelectorType.Small)
        {
            <div class="range">
                <SfRangeNavigator DataSource=Data Value=@Range ValueChanged=@RangeChanged XName="Date" YName="Value" Theme=@Theme.Material Height="100" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" IntervalType=@RangeIntervalType LabelFormat=@RangeIntervalType.ToFormat()>
                    <RangeNavigatorStyleSettings SelectedRegionColor=@Colors.Primary></RangeNavigatorStyleSettings>
                </SfRangeNavigator>
            </div>
        }

        @if (SelectorType == SelectorType.Large)
        {
            <div class="range">
                <SfRangeNavigator Value=@Range ValueChanged=@RangeChanged Theme=@Theme.Material Height="100" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" IntervalType=@RangeIntervalType LabelFormat=@RangeIntervalType.ToFormat()>
                    <RangeNavigatorSeriesCollection>
                        <RangeNavigatorSeries DataSource=Data Fill=@Color Type=@RangeNavigatorType.Line Width="2" XName="Date" YName="Value" />
                    </RangeNavigatorSeriesCollection>
                </SfRangeNavigator>
            </div>
        }
    }
</div>

@code
{
    [Parameter]
    [EditorRequired]
    public IEnumerable<ITemporalValue> Data { get; set; }

    [Parameter]
    public Syncfusion.Blazor.Charts.ValueType ValueType { get; set; } = Syncfusion.Blazor.Charts.ValueType.DateTime;

    [Parameter]
    public SelectorType SelectorType { get; set; } = SelectorType.Small;

    [Parameter]
    public ChartSeriesType Type { get; set; } = ChartSeriesType.Line;

    [Parameter]
    public IntervalType ChartIntervalType { get; set; } = IntervalType.Auto;

    [Parameter]
    public RangeIntervalType RangeIntervalType { get; set; } = RangeIntervalType.Auto;

    [Parameter]
    public string LabelFormat { get; set; } = "{value}";

    [Parameter]
    public DateTime StartDate { get; set; } = DateTime.MinValue;

    [Parameter]
    public DateTime EndDate { get; set; } = DateTime.MaxValue;

    [Parameter]
    public decimal? Minimum { get; set; } = null;

    [Parameter]
    public decimal? Maximum { get; set; } = null;

    [Parameter]
    public string Color { get; set; } = Colors.Primary;

    [Parameter]
    public int LineWidth { get; set; } = 3;

    [Parameter]
    public double Opacity { get; set; } = 3;

    private DateTime[] Range { get; set; }

    private string Height { get => SelectorType == SelectorType.Large ? "450px" : SelectorType == SelectorType.Small ? "400px" : "350px"; }

    private IEnumerable<ITemporalValue> RangedData { get => Data.Where(d => d.Date >= Range[0] && d.Date <= Range[1]); }

    protected override void OnParametersSet()
    {
        if (Data != null)
        {
            Range = new DateTime[] { StartDate, EndDate };
        }
    }

    private void RangeChanged(object args)
    {
        Range = (DateTime[])args;
    }
}
