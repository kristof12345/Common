@namespace Common.Web

@using Common.Application
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

<div class="series-chart" style=@($"height: {Height}")>
    @if (Visibility == "hidden")
    {
        <LoadingIndicator />
    }

    @if (Data != null)
    {
        <div class="chart">
            <SfChart Theme=@Theme.Material Background=@Colors.Transparent Height="350" CustomClass=@Visibility>

                <ChartPrimaryXAxis ValueType=@Syncfusion.Blazor.Charts.ValueType.DateTimeCategory LabelFormat=@LabelFormat LabelIntersectAction=@LabelIntersectAction.Hide EdgeLabelPlacement=@EdgeLabelPlacement.Hide>
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>

                <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" OpposedPosition="true" LabelIntersectAction=@LabelIntersectAction.Hide RangePadding=@ChartRangePadding.Additional Minimum=@Minimum Maximum=@Maximum>
                    <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                </ChartPrimaryYAxis>

                <ChartSeriesCollection>
                    <ChartSeries DataSource=@RangedData Fill=@Color XName="Date" YName="Value" Type=@Type Width=@LineWidth Opacity=@Opacity>
                        @if (Type == ChartSeriesType.Area)
                        {
                            <ChartSeriesBorder Width=@LineWidth Color=@Color></ChartSeriesBorder>
                        }
                    </ChartSeries>
                </ChartSeriesCollection>

            </SfChart>
        </div>

        @if (ShowSelector)
        {
            <div class=@("range " + Visibility)>
                <SfRangeNavigator Value=@Range ValueChanged=@RangeChanged ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" Theme=@Theme.Material Height="100" IntervalType=@IntervalType Interval="1" LabelFormat=@IntervalType.ToFormat()>
                    <RangeNavigatorEvents Loaded=@OnRangeLoaded></RangeNavigatorEvents>
                    <RangeNavigatorSeriesCollection>
                        <RangeNavigatorSeries DataSource=Data Fill=@Color Type=@RangeNavigatorType.Line Width="2" XName="Date" YName="Value" />
                    </RangeNavigatorSeriesCollection>
                </SfRangeNavigator>
            </div>
        }
    }
</div>

@code
{
    [Parameter]
    [EditorRequired]
    public IEnumerable<ITemporalValue> Data { get; set; }

    [Parameter]
    [EditorRequired]
    public DateTime StartDate { get; set; }

    [Parameter]
    [EditorRequired]
    public DateTime EndDate { get; set; }

    [Parameter]
    public decimal? Minimum { get; set; } = null;

    [Parameter]
    public decimal? Maximum { get; set; } = null;

    [Parameter]
    public RangeIntervalType IntervalType { get; set; } = RangeIntervalType.Auto;

    [Parameter]
    public ChartSeriesType Type { get; set; } = ChartSeriesType.Line;

    [Parameter]
    public string LabelFormat { get; set; } = "  yyyy.MM.dd  ";

    [Parameter]
    public bool ShowSelector { get; set; } = true;

    [Parameter]
    public string Color { get; set; } = Colors.Primary;

    [Parameter]
    public int LineWidth { get; set; } = 3;

    [Parameter]
    public double Opacity { get; set; } = 3;

    private string Visibility { get; set; } = "hidden";

    private DateTime[] Range { get; set; }

    private string Height { get => ShowSelector ? "450px" : "350px"; }

    private IEnumerable<ITemporalValue> RangedData { get => Data.Where(d => d.Date >= Range[0] && d.Date <= Range[1]); }

    protected override void OnParametersSet()
    {
        Range = new DateTime[] { StartDate, EndDate };
    }

    private void RangeChanged(object args)
    {
        Range = (DateTime[])args;
    }

    private void OnRangeLoaded(object args)
    {
        Visibility = "visible";
    }
}