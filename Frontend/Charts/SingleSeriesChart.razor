@namespace Common.Web

@using Common.Application
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

<div class="series-chart">
    @if (Data == null)
    {
        <LoadingIndicator />
    }
    else
    {
        <div class="chart">
            <SfChart Theme=@Theme.Material Background=@Colors.Transparent Height="350" CustomClass=@Visibility>

                <ChartPrimaryXAxis ValueType=@Syncfusion.Blazor.Charts.ValueType.DateTimeCategory LabelFormat="  yyyy.MM.dd  " LabelIntersectAction=@LabelIntersectAction.Hide EdgeLabelPlacement=@EdgeLabelPlacement.Shift>
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>

                <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" OpposedPosition="true" LabelFormat="n0" LabelIntersectAction=@LabelIntersectAction.Hide>
                    <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                </ChartPrimaryYAxis>

                <ChartSeriesCollection>
                        <ChartSeries DataSource=@Data Fill=@Color XName="Date" YName="Value" Type=@Type Width=@LineWidth Opacity=@Opacity />
                </ChartSeriesCollection>

            </SfChart>
        </div>

        <div class="range" style=@Visibility>
            <SfRangeNavigator Value=@Range ValueChanged=@RangeChanged ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" Theme=@Theme.Material Height="100">

                <RangeNavigatorSeriesCollection>
                        <RangeNavigatorSeries DataSource=Data Fill=@Color Type=@RangeNavigatorType.Line Width="2" XName="Date" YName="Value" />
                </RangeNavigatorSeriesCollection>

            </SfRangeNavigator>
        </div>
    }
</div>

@code
{
    [Parameter]
    [EditorRequired]
    public IEnumerable<ITemporalValue> Data { get; set; }

    [Parameter]
    [EditorRequired]
    public DateTime StartDate { get; set; }

    [Parameter]
    [EditorRequired]
    public DateTime EndDate { get; set; }

    [Parameter]
    [EditorRequired]
    public string Color { get; set; }

    [Parameter]
    public int LineWidth { get; set; } = 3;

    [Parameter]
    public double Opacity { get; set; } = 3;

    [Parameter]
    public ChartSeriesType Type { get; set; } = ChartSeriesType.Line;

    public IEnumerable<ITemporalValue> RangedData { get => Data.Where(d => d.Date >= Range[0] && d.Date <= Range[1]); }

    private DateTime[] Range { get; set; } = new DateTime[] { new DateTime(2017, 1, 1), new DateTime(2018, 1, 1) };

    private string Visibility { get; set; } = "hidden";

    protected override void OnParametersSet()
    {
        Range = new DateTime[] { StartDate, EndDate };
    }

    private void RangeChanged(object args)
    {
        Range = (DateTime[])args;
    }

    private void OnLoaded(object args)
    {
        Visibility = "visible";
        this.StateHasChanged();
    }
}
