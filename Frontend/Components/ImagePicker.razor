@namespace Common.Web

@using System.Net.Http;
@using System.IO;
@using Syncfusion.Blazor.Inputs;


<div class="upload-drag-drop-zone" style=@($"border-color: {Border}")>
    <SfUploader AutoUpload="false">
        <UploaderEvents ValueChange=@HandleChange></UploaderEvents>
    </SfUploader>
    <Vertical style="align-items: center; padding: 10px;">
        @if (ImageUri != null)
        {
            <img src=@ImageUri style="border-radius: 100%; width: 50px; height: 50px; object-fit: cover;" />
        }
        <p style="font-size: large; margin: auto;">
            @Status
        </p>
    </Vertical>
</div>

@code
{
    [Parameter]
    public MultipartFormDataContent File { get; set; }

    [Parameter]
    public EventCallback<MultipartFormDataContent> FileChanged { get; set; }

    [Parameter]
    public int MaxFileSize { get; set; } = 10 * 1024 * 1024; // 10MB

    [Parameter]
    public string Format { get; set; } = "image/png";

    [Parameter]
    public string Default { get; set; }

    private const string DefaultStatus = "Drop an image file here to upload it, or click to choose a file.";

    private string Status = DefaultStatus;

    private string ImageUri;

    private string Border = Colors.Primary;

    protected override void OnParametersSet()
    {
        if (Default != null && File == null)
        {
            ImageUri = Default + "?" + DateTime.Now.Millisecond;
            Status = "Original image.";
        }
    }

    private async Task HandleChange(UploadChangeEventArgs args)
    {
        var file = args.Files.FirstOrDefault();
        if (file != null)
        {
            if (file.FileInfo.Size > MaxFileSize)
            {
                Status = $"That's too big. Max size: {MaxFileSize} bytes.";
                Clear();
            }
            else if (file.FileInfo.Type != Format)
            {
                Status = "Invalid file. Only png images are allowed.";
                Clear();
            }
            else
            {
                Border = Colors.Warning;
                Status = "Loading image...";

                ImageUri = $"data:{Format};base64,{Convert.ToBase64String(file.Stream.ToArray())}";

                Border = Colors.Success;
                Status = $"File selected: {file.FileInfo.Name}.";

                File = new MultipartFormDataContent { { new ByteArrayContent(file.Stream.GetBuffer()), "\"upload\"", file.FileInfo.Name } };
            }
        }
        await FileChanged.InvokeAsync(File);
    }

    private void Clear()
    {
        ImageUri = null;
        Border = Colors.Error;
        File = null;
    }
}