@page "/chart"

@using Common.Application
@using System.Timers
@using System.Collections.ObjectModel

<Paper Width="1920px" Margin=@Border.Top("30px") Padding=@(new Border("120px", "20px" ))>
    <MultiSeriesChart Data=@MultiSeriesList StartDate=@(new DateTime(2020,1,1)) EndDate=@(new DateTime(2020,1,2)) ShowLegend="true" IntervalType=@Syncfusion.Blazor.Charts.RangeIntervalType.Months />
</Paper>

@if (List.Any())
{
    <Paper Width="1920px" Margin=@Border.Top("30px") Padding=@(new Border("120px", "20px" ))>
        <PolarDiagram Data=@List Height="700px" />
    </Paper>
}

<Paper Width="1920px" Margin=@Border.Top("30px") Padding=@(new Border("120px", "20px" ))>
    <MultiSeriesChart Data=@MultiSeriesList StartDate=@(new DateTime(2020,1,1)) EndDate=@(new DateTime(2020,1,2)) ShowLegend="true" />
</Paper>

<Paper Width="1920px" Margin=@Border.Top("30px") Padding=@(new Border("120px", "20px" ))>
    <MultiSeriesChart Data=@MultiSeriesList StartDate=@(new DateTime(2020,1,1)) EndDate=@(new DateTime(2020,1,2)) ShowLegend="true" ShowSelector="false" Type="ChartSeriesType.StackingColumn" />
</Paper>

<Paper Width="1920px" Margin=@Border.Top("30px") Padding=@(new Border("120px", "20px" ))>
    <SingleSeriesChart Data=@Series StartDate=@(new DateTime(2020,1,1)) EndDate=@(new DateTime(2020,1,2)) Color=@Colors.Primary IntervalType=@Syncfusion.Blazor.Charts.RangeIntervalType.Months />
</Paper>

<Paper Width="1920px" Margin=@Border.Top("30px") Padding=@(new Border("120px", "20px" ))>
    <RealtimeSeriesChart Data=@RealTimeData Color=@Colors.Primary />
</Paper>

@code
{
    [Inject]
    private DataService StockService { get; set; }

    private List<StockPrice> Series;

    private List<ChartDataSeries> MultiSeriesList;

    private static Timer timer;
    private Random randomNum = new Random();
    public ObservableCollection<ITemporalValue> RealTimeData;

    protected override async Task OnInitializedAsync()
    {
        RealTimeData = new ObservableCollection<ITemporalValue>();

        for (int i = 0; i < 360; i++)
        {
            RealTimeData.Add(new Price
            {
                Date = DateTime.Now.AddSeconds(i - 360),
                Value = randomNum.Next(30, 80)
            });
        }

        timer = new Timer(1000);
        timer.Elapsed += AddData;
        timer.AutoReset = true;

        await Task.Delay(new TimeSpan(0, 0, 5)).ContinueWith(o => { timer.Start(); });

        List = new List<ChartData>
        {
            new ChartData
            {
                Id="1",
                Data= 5,
                Label="Label1",
                Color="red"
            },
            new ChartData
            {
                Id="2",
                Data= 10,
                Label="Label2",
                Color="blue"
            },
            new ChartData
            {
                Id="2",
                Data= 10,
                Label="Label3",
                Color="green"
            }
        };

        Series = await StockService.LoadFromJson<List<StockPrice>>("exchange.json");

        MultiSeriesList = new List<ChartDataSeries>
    {
            new ChartDataSeries
            {
                Id = "Series 1",
                Color = Colors.Get(1),
                Data = new List<Price>
            {
                    new Price
                    {
                        Date= new DateTime(2020,1,1),
                        Value=1
                    },
                    new Price
                    {
                        Date= new DateTime(2020,1,2),
                        Value=2
                    },
                    new Price
                    {
                        Date= new DateTime(2020,1,3),
                        Value=3
                    }
                }
            },
            new ChartDataSeries
            {
                Id = "Series 2",
                Color = Colors.Get(2),
                Data = new List<Price>
            {
                    new Price
                    {
                        Date= new DateTime(2020,1,1),
                        Value=11
                    },
                    new Price
                    {
                        Date= new DateTime(2020,1,2),
                        Value=12
                    },
                    new Price
                    {
                        Date= new DateTime(2020,1,3),
                        Value=13
                    }
                }
            },
            new ChartDataSeries
            {
                Id = "Series 3",
                Color = Colors.Get(3),
                Data = new List<Price>
            {
                    new Price
                    {
                        Date= new DateTime(2020,1,1),
                        Value=10
                    },
                    new Price
                    {
                        Date= new DateTime(2020,1,2),
                        Value=20
                    },
                    new Price
                    {
                        Date= new DateTime(2020,1,3),
                        Value=30
                    }
                }
            }
        };
    }

    private void AddData(Object source, ElapsedEventArgs e)
    {
        RealTimeData.RemoveAt(0);
        RealTimeData.Add(new Price
        {
            Date = DateTime.Now,
            Value = randomNum.Next(30, 80)
        });
    }

    public class Price : ITemporalValue
    {
        public DateTime Date { get; set; }

        public decimal Value { get; set; }
    }
}