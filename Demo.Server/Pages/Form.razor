@page "/form"

<Container Margin=@(new Border("0px", "70px"))>
    <Paper Width="1920px" Margin=@(new Border("0px", "30px")) Padding=@(new Border("120px", "20px" ))>
        <Heading Style="padding-bottom: 20px;">Validated form</Heading>
        <EditForm Model=@Model OnValidSubmit=@ValidSubmit OnInvalidSubmit=@InvalidSubmit>
            <DataAnnotationsValidator />
            <TextField @bind-Value=@Model.String Label="TextField" ValidationExpression=@(() => Model.String) />
            <TextArea @bind-Value=@Model.Text Label="TextArea" ValidationExpression=@(() => Model.Text) />
            <Autocomplete @bind-Value=@Model.Autocomplete Items=@List Label="Autocomplete" ValidationExpression=@(() => Model.Autocomplete) />
            <DropdownList @bind-Value=@Model.Select Items=@List Label="SelectValue" ValidationExpression=@(() => Model.Select) />
            <DatePicker @bind-Value=@Model.DateTime Label="DateTime" ValidationExpression=@(() => Model.DateTime) />
            <DatePicker @bind-Value=@Model.NullableDateTime Label="Nullable DateTime" ValidationExpression=@(() => Model.NullableDateTime) />
            <DatePicker @bind-Value=@Model.DateRange.Start Label="DateRange Start" ValidationExpression=@(() => Model.DateRange.Start) />
            <DatePicker @bind-Value=@Model.DateRange.End Label="DateRange End" ValidationExpression=@(() => Model.DateRange.End) />
            <NumericField @bind-Value=@Model.Integer Label="Integer" ValidationExpression=@(() => Model.Integer) Min="0" Max="10" Step="1" />
            <NumericField @bind-Value=@Model.OptionalInteger Label="OptionalInteger" ValidationExpression=@(() => Model.OptionalInteger) Min="0" Max="10" Step="1" />
            <NumericField @bind-Value=@Model.Double Label="Double" ValidationExpression=@(() => Model.Double) />
            <NumericField @bind-Value=@Model.Decimal Label="Decimal" ValidationExpression=@(() => Model.Decimal) />
            <ColorPicker @bind-Value=@Model.Color Label="ColorPicker" />
            <CheckBox @bind-Value=@Model.Checked Label="CheckBox" />
            <SegmentedControl @bind-Tab=@SelectedTab Tabs=@(new List<string>{ "Apple", "Banana", "Orange", "Blackberry", "Peach", "Cherry", "Melon", "Strawberry" }) Id="fruits" />
            @SelectedTab
            <Horizontal HorizontalAlign=@HorizontalAlignment.SpaceBetween Wrap=@FlexWrap.Wrap>
                <Button Type="reset" OnClick=@Reset>Reset</Button>
                <Button Outlined="true">Outlined</Button>
                <Button Color="red">Red</Button>
                <Button Color="red" Outlined="true">RedOutlined</Button>
                <Button Type="submit">Submit</Button>
            </Horizontal>
            <Horizontal HorizontalAlign=@HorizontalAlignment.SpaceBetween Wrap=@FlexWrap.Wrap>
                <LinkButton Link="./">LinkButton</LinkButton>
                <LinkButton Link="./" Outlined="true">Outlined LinkButton</LinkButton>
                <LinkButton Link="./" Color="red">Red LinkButton</LinkButton>
                <LinkButton Link="./" Color="red" Outlined="true">RedOutlined LinkButton</LinkButton>
            </Horizontal>
        </EditForm>

    </Paper>
    <Paper Width="1920px" Margin=@(new Border("0px", "30px")) Padding=@(new Border("120px", "20px" ))>
        <Heading Style="padding-bottom: 20px;">Not validated form</Heading>
        <TextField @bind-Value=@Model.String Label="TextField" />
        <TextArea @bind-Value=@Model.Text Label="TextArea" />
        <Autocomplete @bind-Value=@Model.Autocomplete Items=@List Label="Autocomplete" />
        <DropdownList @bind-Value=@Model.Select Items=@List Label="SelectValue" />
        <DatePicker @bind-Value=@Model.DateTime Label="DateTime" />
        <DatePicker @bind-Value=@Model.NullableDateTime Label="Nullable DateTime" />
        <DatePicker @bind-Value=@Model.DateRange.Start Label="DateRange Start" />
        <DatePicker @bind-Value=@Model.DateRange.End Label="DateRange End" />
        <NumericField @bind-Value=@Model.Integer Label="Integer" Min="0" Max="10" Step="1" />
        <NumericField @bind-Value=@Model.OptionalInteger Label="OptionalInteger" Min="0" Max="10" Step="1" />
        <NumericField @bind-Value=@Model.Double Label="Double" />
        <NumericField @bind-Value=@Model.Decimal Label="Decimal" />
        <ColorPicker @bind-Value=@Model.Color Label="ColorPicker" />
        <CheckBox @bind-Value=@Model.Checked Label="CheckBox" />
        <Horizontal HorizontalAlign=@HorizontalAlignment.SpaceBetween>
            <Button Type="reset" OnClick=@Reset>Reset</Button>
            <Button Outlined="true">Outlined</Button>
            <Button Color="red">Red</Button>
            <Button Color="red" Outlined="true">RedOutlined</Button>
            <Button Type="submit">Submit</Button>
        </Horizontal>
        <Horizontal HorizontalAlign=@HorizontalAlignment.SpaceBetween Wrap=@FlexWrap.Wrap>
            <LinkButton Link="./">LinkButton</LinkButton>
            <LinkButton Link="./" Outlined="true">Outlined LinkButton</LinkButton>
            <LinkButton Link="./" Color="red">Red LinkButton</LinkButton>
            <LinkButton Link="./" Color="red" Outlined="true">RedOutlined LinkButton</LinkButton>
        </Horizontal>
        <Horizontal HorizontalAlign=@HorizontalAlignment.SpaceBetween Margin=@Border.Top("20px") Wrap=@FlexWrap.Wrap>
            <Button Color=@Colors.Success Outlined="true" Width="8%">Add</Button>
            <Button Color=@Colors.Warning Outlined="true" Width="8%">Refresh</Button>
            <Button Color=@Colors.Error Outlined="true" Width="8%">Delete</Button>
        </Horizontal>
        <Horizontal HorizontalAlign=@HorizontalAlignment.SpaceBetween Margin=@Border.Top("20px") Wrap=@FlexWrap.Wrap>
            <Button Disabled="true" Color=@Colors.Success Outlined="true" Width="8%">Add</Button>
            <Button Disabled="true" Color=@Colors.Warning Outlined="true" Width="8%">Refresh</Button>
            <Button Disabled="true" Color=@Colors.Error Outlined="true" Width="8%">Delete</Button>
        </Horizontal>
    </Paper>
</Container>

@code
{
    [Inject]
    protected ToastService Toaster { get; set; }

    protected string SelectedTab { get; set; } = "Apple";

    private DemoModel Model = new DemoModel();

    private IEnumerable<string> List = new List<string> { "First", "Second", "Third" };

    private async Task ValidSubmit()
    {
        await Toaster.Add("Success", ToastType.Success);
    }

    private async Task InvalidSubmit()
    {
        await Toaster.Add("Invalid", ToastType.Warning);
    }

    public async Task Reset()
    {
        await Toaster.Add("Reset", ToastType.Danger);
    }
}
